Modules

include - all those methods will be added to all instances
extend - class level methods

modules used for namespacing

class Account < ActiveRecord::Base
	has_many :users, default: true
end

same as
class Account < ActiveRecord::Base
	Account.has_many(:users, {defult: true})
end


block not an object - store blocks within procs

lambdas like procs - but counts number of arguments that we passed through
difference in return behaviour


instance_eval - can run code in the block that's passed through to it in the context of the class that it's in


MVC = ARCHITECTURAL design pattern (diff to design pattern)

DESIGN PATTERNS
Patterns of Enterprise Application Architecture (book)
Design Patterns (Gang of Four book) Elements of 
Design Patterns in Ruby

-----------------------------------------

1. 	Active Record - actually design pattern name that Rails ActiveRecord is built with
-----------------------------------------
2. 	Front Controller

		RACK - at it's simplest is a specification for how the web server communicates with your application (/framework). If a webserver is rack compliant - it can host rails
		A rack application must respond to 'call' method - takes environment hash and outputs an array with STATUS, HEADER and BODY - browser converts this into a HTTP response


		config.ru - tells the web server how to boot your app (load/define app run). ru = rack up  but just ruby code. name is convention (just like index.html - config.ru is looked for by web server)

		Middleware. Like an app - can only have one app running at one time but can have multiple middlewares running on top of one another (kind of like before and after filers - add behaviour on top of app, either before or after). Reusable functionality that you can put on top of any application. Can easily comment out the "use <Middleware>" call to stop that functionality without affecting the app. 
		Can chain middleware, e.g. run Logger.new(Caching.new(App.new)), calls the call method from Logger then Caching then App - each call references the next
		Flash support, Cookie support, Caching support implemented in rails using Middleware

		Rack - there is a rack gem that comes with utility classes to help create the requests and responses as per the rack specifiction. Remember, rack is really just the specification. eg can use Rack::Request to access env variale in a nicer way....request.path_name
		
	ignoring a value - use '_
	' e.g. _, controller, action = path.split("/") 


	Ruby  - any variable that starts with a capital letter is a constant, eg String, CONSTANT, i.e. warning when you change its value
	Classes are considered constant
	Object.const_get HomeController

-------------------------------
3. Interceptin Filter (Design Pattern)

Used often with Front Controller - share functionality across alll controllers => before_, after_ and around_ filters (rails 4 changes to before_action instead of before_action). Basically all callbacks in controllers and models are handled using Intercepting Filter. 

Rack Middlewares are a sort of implementation of Intercepting Filter too. 

implemented in a module and included in Base class - otherwise, Base would end up being a sprawling mess!

Can't call a super from a module (inheritance appplies to classes). To use a super within a modele they need to be set up in a specific way - see super_module.rb

see Filters.rb for implementation of class level methods within a module - used a lot in Rails source code

---------------------------------
4. Template View (Design Pattern)

erb is an implementation of Template View design pattern - standard library these days and ships with ruby, not locaed by default so need to require "erb" (alternatives haml etc) - (no need to require core libraries eg String...)

binding??? eval??

erb templates are compiled to ruby code, then eval - control by passing a specific binding
only use of binding is for passing it to eval

none of this binding and eval stuff makes sense to me!
Some difficulty understanding around filters. 

/day one
------------------------------------------------------------------
day two

USING THE SOURCE

Some Commands
gem edit <gemname> (inside your application, use bundle open <gemname> - opens the version that you're using for this project. references the GemFile)
gem dep <gemname and version> - lists dependencies

Most code is going to be in lib directory of a gem. Everything in the lib directory is loaded in the global load path of ruby automatically - need to be careful what you put in here. Naming convention - have a folder in lib director of gem with same name as gem and all code is in here. 

Sometimes see a rails folder in the lib directory - this means that the gem is extending part of rails functionality

Active Record, ActionPack ActionMailer, Railties, Rails are gems

ActionController, ActionView ActionDispatch - namespaces with the ActionPack gem

ActionView - includes helpers. view logic, should never contain business logic. DONT DO IT!

ActionDispatch - making compliant rack application. Handling middelwares



extend  vs include
extend - use class level methods




Active record, Controller etc all have a base class

Active Support is a bit different - doesn't have a base class. Utility modules. Can include these in your own class

See activesupport/concern.rb - see similar pattern for including class level methods in modules as we did yesterday in filters

activesupport/callbacks == fiters.rb from yesterday

active/configurable => Rails.config


Core Extensions----
activesupport/core_ext--These extend core classes of ruby. extending Array functionality for example. Can see access to more methods in rails. Lots of extensions to hash objects too...etc etc



QUESTION: When active_record/concern is required at the top of the filters file, how does this application know where to find active support? Is it aware of the gems through ruby?
